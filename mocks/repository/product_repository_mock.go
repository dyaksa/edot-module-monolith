// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"

	"github.com/dyaksa/warehouse/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProductRepository creates a new instance of MockProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepository {
	mock := &MockProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductRepository is an autogenerated mock type for the ProductRepository type
type MockProductRepository struct {
	mock.Mock
}

type MockProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepository) EXPECT() *MockProductRepository_Expecter {
	return &MockProductRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) Create(ctx context.Context, product *domain.Product) (uuid.UUID, error) {
	ret := _mock.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) (uuid.UUID, error)); ok {
		return returnFunc(ctx, product)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) uuid.UUID); ok {
		r0 = returnFunc(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Product) error); ok {
		r1 = returnFunc(ctx, product)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - product
func (_e *MockProductRepository_Expecter) Create(ctx interface{}, product interface{}) *MockProductRepository_Create_Call {
	return &MockProductRepository_Create_Call{Call: _e.mock.On("Create", ctx, product)}
}

func (_c *MockProductRepository_Create_Call) Run(run func(ctx context.Context, product *domain.Product)) *MockProductRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Product))
	})
	return _c
}

func (_c *MockProductRepository_Create_Call) Return(uUID uuid.UUID, err error) *MockProductRepository_Create_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockProductRepository_Create_Call) RunAndReturn(run func(ctx context.Context, product *domain.Product) (uuid.UUID, error)) *MockProductRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAll provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) RetrieveAll(ctx context.Context, limit int, offset int) ([]domain.RetrieveProduct, error) {
	ret := _mock.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAll")
	}

	var r0 []domain.RetrieveProduct
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]domain.RetrieveProduct, error)); ok {
		return returnFunc(ctx, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []domain.RetrieveProduct); ok {
		r0 = returnFunc(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RetrieveProduct)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_RetrieveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAll'
type MockProductRepository_RetrieveAll_Call struct {
	*mock.Call
}

// RetrieveAll is a helper method to define mock.On call
//   - ctx
//   - limit
//   - offset
func (_e *MockProductRepository_Expecter) RetrieveAll(ctx interface{}, limit interface{}, offset interface{}) *MockProductRepository_RetrieveAll_Call {
	return &MockProductRepository_RetrieveAll_Call{Call: _e.mock.On("RetrieveAll", ctx, limit, offset)}
}

func (_c *MockProductRepository_RetrieveAll_Call) Run(run func(ctx context.Context, limit int, offset int)) *MockProductRepository_RetrieveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockProductRepository_RetrieveAll_Call) Return(retrieveProducts []domain.RetrieveProduct, err error) *MockProductRepository_RetrieveAll_Call {
	_c.Call.Return(retrieveProducts, err)
	return _c
}

func (_c *MockProductRepository_RetrieveAll_Call) RunAndReturn(run func(ctx context.Context, limit int, offset int) ([]domain.RetrieveProduct, error)) *MockProductRepository_RetrieveAll_Call {
	_c.Call.Return(run)
	return _c
}
