// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"
	"database/sql"

	"github.com/dyaksa/warehouse/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOrderItemRepository creates a new instance of MockOrderItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderItemRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderItemRepository {
	mock := &MockOrderItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderItemRepository is an autogenerated mock type for the OrderItemRepository type
type MockOrderItemRepository struct {
	mock.Mock
}

type MockOrderItemRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderItemRepository) EXPECT() *MockOrderItemRepository_Expecter {
	return &MockOrderItemRepository_Expecter{mock: &_m.Mock}
}

// BulkInsert provides a mock function for the type MockOrderItemRepository
func (_mock *MockOrderItemRepository) BulkInsert(ctx context.Context, tx *sql.Tx, items []domain.OrderItem) error {
	ret := _mock.Called(ctx, tx, items)

	if len(ret) == 0 {
		panic("no return value specified for BulkInsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, []domain.OrderItem) error); ok {
		r0 = returnFunc(ctx, tx, items)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderItemRepository_BulkInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkInsert'
type MockOrderItemRepository_BulkInsert_Call struct {
	*mock.Call
}

// BulkInsert is a helper method to define mock.On call
//   - ctx
//   - tx
//   - items
func (_e *MockOrderItemRepository_Expecter) BulkInsert(ctx interface{}, tx interface{}, items interface{}) *MockOrderItemRepository_BulkInsert_Call {
	return &MockOrderItemRepository_BulkInsert_Call{Call: _e.mock.On("BulkInsert", ctx, tx, items)}
}

func (_c *MockOrderItemRepository_BulkInsert_Call) Run(run func(ctx context.Context, tx *sql.Tx, items []domain.OrderItem)) *MockOrderItemRepository_BulkInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].([]domain.OrderItem))
	})
	return _c
}

func (_c *MockOrderItemRepository_BulkInsert_Call) Return(err error) *MockOrderItemRepository_BulkInsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderItemRepository_BulkInsert_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, items []domain.OrderItem) error) *MockOrderItemRepository_BulkInsert_Call {
	_c.Call.Return(run)
	return _c
}
