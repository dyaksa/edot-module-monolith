// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"

	"github.com/dyaksa/warehouse/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) CreateUser(ctx context.Context, user *domain.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserRepository_Expecter) CreateUser(ctx interface{}, user interface{}) *MockUserRepository_CreateUser_Call {
	return &MockUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockUserRepository_CreateUser_Call) Run(run func(ctx context.Context, user *domain.User)) *MockUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) Return(err error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) RunAndReturn(run func(ctx context.Context, user *domain.User) error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetMailOrPhone provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetMailOrPhone(ctx context.Context, email_bidx string, phone_bidx string, fn func(data *domain.User)) (*domain.User, error) {
	ret := _mock.Called(ctx, email_bidx, phone_bidx, fn)

	if len(ret) == 0 {
		panic("no return value specified for GetMailOrPhone")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, func(data *domain.User)) (*domain.User, error)); ok {
		return returnFunc(ctx, email_bidx, phone_bidx, fn)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, func(data *domain.User)) *domain.User); ok {
		r0 = returnFunc(ctx, email_bidx, phone_bidx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, func(data *domain.User)) error); ok {
		r1 = returnFunc(ctx, email_bidx, phone_bidx, fn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetMailOrPhone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMailOrPhone'
type MockUserRepository_GetMailOrPhone_Call struct {
	*mock.Call
}

// GetMailOrPhone is a helper method to define mock.On call
//   - ctx
//   - email_bidx
//   - phone_bidx
//   - fn
func (_e *MockUserRepository_Expecter) GetMailOrPhone(ctx interface{}, email_bidx interface{}, phone_bidx interface{}, fn interface{}) *MockUserRepository_GetMailOrPhone_Call {
	return &MockUserRepository_GetMailOrPhone_Call{Call: _e.mock.On("GetMailOrPhone", ctx, email_bidx, phone_bidx, fn)}
}

func (_c *MockUserRepository_GetMailOrPhone_Call) Run(run func(ctx context.Context, email_bidx string, phone_bidx string, fn func(data *domain.User))) *MockUserRepository_GetMailOrPhone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(func(data *domain.User)))
	})
	return _c
}

func (_c *MockUserRepository_GetMailOrPhone_Call) Return(user *domain.User, err error) *MockUserRepository_GetMailOrPhone_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetMailOrPhone_Call) RunAndReturn(run func(ctx context.Context, email_bidx string, phone_bidx string, fn func(data *domain.User)) (*domain.User, error)) *MockUserRepository_GetMailOrPhone_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserByEmail(ctx context.Context, email_bidx string, fn func(data *domain.User)) (*domain.User, error) {
	ret := _mock.Called(ctx, email_bidx, fn)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(data *domain.User)) (*domain.User, error)); ok {
		return returnFunc(ctx, email_bidx, fn)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(data *domain.User)) *domain.User); ok {
		r0 = returnFunc(ctx, email_bidx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, func(data *domain.User)) error); ok {
		r1 = returnFunc(ctx, email_bidx, fn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserRepository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx
//   - email_bidx
//   - fn
func (_e *MockUserRepository_Expecter) GetUserByEmail(ctx interface{}, email_bidx interface{}, fn interface{}) *MockUserRepository_GetUserByEmail_Call {
	return &MockUserRepository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email_bidx, fn)}
}

func (_c *MockUserRepository_GetUserByEmail_Call) Run(run func(ctx context.Context, email_bidx string, fn func(data *domain.User))) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(func(data *domain.User)))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByEmail_Call) Return(user *domain.User, err error) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email_bidx string, fn func(data *domain.User)) (*domain.User, error)) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByPhone provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserByPhone(ctx context.Context, phone_bidx string, fn func(data *domain.User)) (*domain.User, error) {
	ret := _mock.Called(ctx, phone_bidx, fn)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByPhone")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(data *domain.User)) (*domain.User, error)); ok {
		return returnFunc(ctx, phone_bidx, fn)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(data *domain.User)) *domain.User); ok {
		r0 = returnFunc(ctx, phone_bidx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, func(data *domain.User)) error); ok {
		r1 = returnFunc(ctx, phone_bidx, fn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserByPhone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByPhone'
type MockUserRepository_GetUserByPhone_Call struct {
	*mock.Call
}

// GetUserByPhone is a helper method to define mock.On call
//   - ctx
//   - phone_bidx
//   - fn
func (_e *MockUserRepository_Expecter) GetUserByPhone(ctx interface{}, phone_bidx interface{}, fn interface{}) *MockUserRepository_GetUserByPhone_Call {
	return &MockUserRepository_GetUserByPhone_Call{Call: _e.mock.On("GetUserByPhone", ctx, phone_bidx, fn)}
}

func (_c *MockUserRepository_GetUserByPhone_Call) Run(run func(ctx context.Context, phone_bidx string, fn func(data *domain.User))) *MockUserRepository_GetUserByPhone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(func(data *domain.User)))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByPhone_Call) Return(user *domain.User, err error) *MockUserRepository_GetUserByPhone_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUserByPhone_Call) RunAndReturn(run func(ctx context.Context, phone_bidx string, fn func(data *domain.User)) (*domain.User, error)) *MockUserRepository_GetUserByPhone_Call {
	_c.Call.Return(run)
	return _c
}
