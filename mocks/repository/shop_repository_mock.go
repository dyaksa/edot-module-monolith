// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"

	"github.com/dyaksa/warehouse/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockShopRepository creates a new instance of MockShopRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShopRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShopRepository {
	mock := &MockShopRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockShopRepository is an autogenerated mock type for the ShopRepository type
type MockShopRepository struct {
	mock.Mock
}

type MockShopRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShopRepository) EXPECT() *MockShopRepository_Expecter {
	return &MockShopRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockShopRepository
func (_mock *MockShopRepository) Create(ctx context.Context, shop *domain.Shop) (uuid.UUID, error) {
	ret := _mock.Called(ctx, shop)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Shop) (uuid.UUID, error)); ok {
		return returnFunc(ctx, shop)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Shop) uuid.UUID); ok {
		r0 = returnFunc(ctx, shop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Shop) error); ok {
		r1 = returnFunc(ctx, shop)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockShopRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockShopRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - shop
func (_e *MockShopRepository_Expecter) Create(ctx interface{}, shop interface{}) *MockShopRepository_Create_Call {
	return &MockShopRepository_Create_Call{Call: _e.mock.On("Create", ctx, shop)}
}

func (_c *MockShopRepository_Create_Call) Run(run func(ctx context.Context, shop *domain.Shop)) *MockShopRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Shop))
	})
	return _c
}

func (_c *MockShopRepository_Create_Call) Return(uUID uuid.UUID, err error) *MockShopRepository_Create_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockShopRepository_Create_Call) RunAndReturn(run func(ctx context.Context, shop *domain.Shop) (uuid.UUID, error)) *MockShopRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockShopRepository
func (_mock *MockShopRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockShopRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockShopRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockShopRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockShopRepository_Delete_Call {
	return &MockShopRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockShopRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockShopRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockShopRepository_Delete_Call) Return(err error) *MockShopRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockShopRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockShopRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Retrieve provides a mock function for the type MockShopRepository
func (_mock *MockShopRepository) Retrieve(ctx context.Context, id uuid.UUID) (*domain.Shop, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 *domain.Shop
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Shop, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Shop); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Shop)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockShopRepository_Retrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retrieve'
type MockShopRepository_Retrieve_Call struct {
	*mock.Call
}

// Retrieve is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockShopRepository_Expecter) Retrieve(ctx interface{}, id interface{}) *MockShopRepository_Retrieve_Call {
	return &MockShopRepository_Retrieve_Call{Call: _e.mock.On("Retrieve", ctx, id)}
}

func (_c *MockShopRepository_Retrieve_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockShopRepository_Retrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockShopRepository_Retrieve_Call) Return(shop *domain.Shop, err error) *MockShopRepository_Retrieve_Call {
	_c.Call.Return(shop, err)
	return _c
}

func (_c *MockShopRepository_Retrieve_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*domain.Shop, error)) *MockShopRepository_Retrieve_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockShopRepository
func (_mock *MockShopRepository) Update(ctx context.Context, shop *domain.Shop) error {
	ret := _mock.Called(ctx, shop)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Shop) error); ok {
		r0 = returnFunc(ctx, shop)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockShopRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockShopRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - shop
func (_e *MockShopRepository_Expecter) Update(ctx interface{}, shop interface{}) *MockShopRepository_Update_Call {
	return &MockShopRepository_Update_Call{Call: _e.mock.On("Update", ctx, shop)}
}

func (_c *MockShopRepository_Update_Call) Run(run func(ctx context.Context, shop *domain.Shop)) *MockShopRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Shop))
	})
	return _c
}

func (_c *MockShopRepository_Update_Call) Return(err error) *MockShopRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockShopRepository_Update_Call) RunAndReturn(run func(ctx context.Context, shop *domain.Shop) error) *MockShopRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
