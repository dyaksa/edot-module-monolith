// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"
	"database/sql"

	"github.com/dyaksa/warehouse/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWarehouseTransferRepository creates a new instance of MockWarehouseTransferRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWarehouseTransferRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWarehouseTransferRepository {
	mock := &MockWarehouseTransferRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWarehouseTransferRepository is an autogenerated mock type for the WarehouseTransferRepository type
type MockWarehouseTransferRepository struct {
	mock.Mock
}

type MockWarehouseTransferRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWarehouseTransferRepository) EXPECT() *MockWarehouseTransferRepository_Expecter {
	return &MockWarehouseTransferRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockWarehouseTransferRepository
func (_mock *MockWarehouseTransferRepository) Create(ctx context.Context, tx *sql.Tx, transfer *domain.WarehouseTransfer) error {
	ret := _mock.Called(ctx, tx, transfer)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, *domain.WarehouseTransfer) error); ok {
		r0 = returnFunc(ctx, tx, transfer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWarehouseTransferRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockWarehouseTransferRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - tx
//   - transfer
func (_e *MockWarehouseTransferRepository_Expecter) Create(ctx interface{}, tx interface{}, transfer interface{}) *MockWarehouseTransferRepository_Create_Call {
	return &MockWarehouseTransferRepository_Create_Call{Call: _e.mock.On("Create", ctx, tx, transfer)}
}

func (_c *MockWarehouseTransferRepository_Create_Call) Run(run func(ctx context.Context, tx *sql.Tx, transfer *domain.WarehouseTransfer)) *MockWarehouseTransferRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(*domain.WarehouseTransfer))
	})
	return _c
}

func (_c *MockWarehouseTransferRepository_Create_Call) Return(err error) *MockWarehouseTransferRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWarehouseTransferRepository_Create_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, transfer *domain.WarehouseTransfer) error) *MockWarehouseTransferRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateItems provides a mock function for the type MockWarehouseTransferRepository
func (_mock *MockWarehouseTransferRepository) CreateItems(ctx context.Context, tx *sql.Tx, items []domain.WarehouseTransferItem) error {
	ret := _mock.Called(ctx, tx, items)

	if len(ret) == 0 {
		panic("no return value specified for CreateItems")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, []domain.WarehouseTransferItem) error); ok {
		r0 = returnFunc(ctx, tx, items)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWarehouseTransferRepository_CreateItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateItems'
type MockWarehouseTransferRepository_CreateItems_Call struct {
	*mock.Call
}

// CreateItems is a helper method to define mock.On call
//   - ctx
//   - tx
//   - items
func (_e *MockWarehouseTransferRepository_Expecter) CreateItems(ctx interface{}, tx interface{}, items interface{}) *MockWarehouseTransferRepository_CreateItems_Call {
	return &MockWarehouseTransferRepository_CreateItems_Call{Call: _e.mock.On("CreateItems", ctx, tx, items)}
}

func (_c *MockWarehouseTransferRepository_CreateItems_Call) Run(run func(ctx context.Context, tx *sql.Tx, items []domain.WarehouseTransferItem)) *MockWarehouseTransferRepository_CreateItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].([]domain.WarehouseTransferItem))
	})
	return _c
}

func (_c *MockWarehouseTransferRepository_CreateItems_Call) Return(err error) *MockWarehouseTransferRepository_CreateItems_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWarehouseTransferRepository_CreateItems_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, items []domain.WarehouseTransferItem) error) *MockWarehouseTransferRepository_CreateItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveTransfersByWarehouse provides a mock function for the type MockWarehouseTransferRepository
func (_mock *MockWarehouseTransferRepository) GetActiveTransfersByWarehouse(ctx context.Context, warehouseID uuid.UUID) ([]domain.WarehouseTransfer, error) {
	ret := _mock.Called(ctx, warehouseID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveTransfersByWarehouse")
	}

	var r0 []domain.WarehouseTransfer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]domain.WarehouseTransfer, error)); ok {
		return returnFunc(ctx, warehouseID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []domain.WarehouseTransfer); ok {
		r0 = returnFunc(ctx, warehouseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.WarehouseTransfer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, warehouseID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWarehouseTransferRepository_GetActiveTransfersByWarehouse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveTransfersByWarehouse'
type MockWarehouseTransferRepository_GetActiveTransfersByWarehouse_Call struct {
	*mock.Call
}

// GetActiveTransfersByWarehouse is a helper method to define mock.On call
//   - ctx
//   - warehouseID
func (_e *MockWarehouseTransferRepository_Expecter) GetActiveTransfersByWarehouse(ctx interface{}, warehouseID interface{}) *MockWarehouseTransferRepository_GetActiveTransfersByWarehouse_Call {
	return &MockWarehouseTransferRepository_GetActiveTransfersByWarehouse_Call{Call: _e.mock.On("GetActiveTransfersByWarehouse", ctx, warehouseID)}
}

func (_c *MockWarehouseTransferRepository_GetActiveTransfersByWarehouse_Call) Run(run func(ctx context.Context, warehouseID uuid.UUID)) *MockWarehouseTransferRepository_GetActiveTransfersByWarehouse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockWarehouseTransferRepository_GetActiveTransfersByWarehouse_Call) Return(warehouseTransfers []domain.WarehouseTransfer, err error) *MockWarehouseTransferRepository_GetActiveTransfersByWarehouse_Call {
	_c.Call.Return(warehouseTransfers, err)
	return _c
}

func (_c *MockWarehouseTransferRepository_GetActiveTransfersByWarehouse_Call) RunAndReturn(run func(ctx context.Context, warehouseID uuid.UUID) ([]domain.WarehouseTransfer, error)) *MockWarehouseTransferRepository_GetActiveTransfersByWarehouse_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockWarehouseTransferRepository
func (_mock *MockWarehouseTransferRepository) GetByID(ctx context.Context, id uuid.UUID) (*domain.WarehouseTransfer, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.WarehouseTransfer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.WarehouseTransfer, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.WarehouseTransfer); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.WarehouseTransfer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWarehouseTransferRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockWarehouseTransferRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockWarehouseTransferRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockWarehouseTransferRepository_GetByID_Call {
	return &MockWarehouseTransferRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockWarehouseTransferRepository_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockWarehouseTransferRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockWarehouseTransferRepository_GetByID_Call) Return(warehouseTransfer *domain.WarehouseTransfer, err error) *MockWarehouseTransferRepository_GetByID_Call {
	_c.Call.Return(warehouseTransfer, err)
	return _c
}

func (_c *MockWarehouseTransferRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*domain.WarehouseTransfer, error)) *MockWarehouseTransferRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByWarehouse provides a mock function for the type MockWarehouseTransferRepository
func (_mock *MockWarehouseTransferRepository) GetByWarehouse(ctx context.Context, warehouseID uuid.UUID, limit int, offset int) ([]domain.WarehouseTransfer, int, error) {
	ret := _mock.Called(ctx, warehouseID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByWarehouse")
	}

	var r0 []domain.WarehouseTransfer
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]domain.WarehouseTransfer, int, error)); ok {
		return returnFunc(ctx, warehouseID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []domain.WarehouseTransfer); ok {
		r0 = returnFunc(ctx, warehouseID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.WarehouseTransfer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) int); ok {
		r1 = returnFunc(ctx, warehouseID, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, uuid.UUID, int, int) error); ok {
		r2 = returnFunc(ctx, warehouseID, limit, offset)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockWarehouseTransferRepository_GetByWarehouse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByWarehouse'
type MockWarehouseTransferRepository_GetByWarehouse_Call struct {
	*mock.Call
}

// GetByWarehouse is a helper method to define mock.On call
//   - ctx
//   - warehouseID
//   - limit
//   - offset
func (_e *MockWarehouseTransferRepository_Expecter) GetByWarehouse(ctx interface{}, warehouseID interface{}, limit interface{}, offset interface{}) *MockWarehouseTransferRepository_GetByWarehouse_Call {
	return &MockWarehouseTransferRepository_GetByWarehouse_Call{Call: _e.mock.On("GetByWarehouse", ctx, warehouseID, limit, offset)}
}

func (_c *MockWarehouseTransferRepository_GetByWarehouse_Call) Run(run func(ctx context.Context, warehouseID uuid.UUID, limit int, offset int)) *MockWarehouseTransferRepository_GetByWarehouse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockWarehouseTransferRepository_GetByWarehouse_Call) Return(warehouseTransfers []domain.WarehouseTransfer, n int, err error) *MockWarehouseTransferRepository_GetByWarehouse_Call {
	_c.Call.Return(warehouseTransfers, n, err)
	return _c
}

func (_c *MockWarehouseTransferRepository_GetByWarehouse_Call) RunAndReturn(run func(ctx context.Context, warehouseID uuid.UUID, limit int, offset int) ([]domain.WarehouseTransfer, int, error)) *MockWarehouseTransferRepository_GetByWarehouse_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemsByTransferID provides a mock function for the type MockWarehouseTransferRepository
func (_mock *MockWarehouseTransferRepository) GetItemsByTransferID(ctx context.Context, transferID uuid.UUID) ([]domain.WarehouseTransferItem, error) {
	ret := _mock.Called(ctx, transferID)

	if len(ret) == 0 {
		panic("no return value specified for GetItemsByTransferID")
	}

	var r0 []domain.WarehouseTransferItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]domain.WarehouseTransferItem, error)); ok {
		return returnFunc(ctx, transferID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []domain.WarehouseTransferItem); ok {
		r0 = returnFunc(ctx, transferID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.WarehouseTransferItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, transferID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWarehouseTransferRepository_GetItemsByTransferID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemsByTransferID'
type MockWarehouseTransferRepository_GetItemsByTransferID_Call struct {
	*mock.Call
}

// GetItemsByTransferID is a helper method to define mock.On call
//   - ctx
//   - transferID
func (_e *MockWarehouseTransferRepository_Expecter) GetItemsByTransferID(ctx interface{}, transferID interface{}) *MockWarehouseTransferRepository_GetItemsByTransferID_Call {
	return &MockWarehouseTransferRepository_GetItemsByTransferID_Call{Call: _e.mock.On("GetItemsByTransferID", ctx, transferID)}
}

func (_c *MockWarehouseTransferRepository_GetItemsByTransferID_Call) Run(run func(ctx context.Context, transferID uuid.UUID)) *MockWarehouseTransferRepository_GetItemsByTransferID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockWarehouseTransferRepository_GetItemsByTransferID_Call) Return(warehouseTransferItems []domain.WarehouseTransferItem, err error) *MockWarehouseTransferRepository_GetItemsByTransferID_Call {
	_c.Call.Return(warehouseTransferItems, err)
	return _c
}

func (_c *MockWarehouseTransferRepository_GetItemsByTransferID_Call) RunAndReturn(run func(ctx context.Context, transferID uuid.UUID) ([]domain.WarehouseTransferItem, error)) *MockWarehouseTransferRepository_GetItemsByTransferID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type MockWarehouseTransferRepository
func (_mock *MockWarehouseTransferRepository) UpdateStatus(ctx context.Context, tx *sql.Tx, id uuid.UUID, status domain.TransferStatus) error {
	ret := _mock.Called(ctx, tx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID, domain.TransferStatus) error); ok {
		r0 = returnFunc(ctx, tx, id, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWarehouseTransferRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockWarehouseTransferRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx
//   - tx
//   - id
//   - status
func (_e *MockWarehouseTransferRepository_Expecter) UpdateStatus(ctx interface{}, tx interface{}, id interface{}, status interface{}) *MockWarehouseTransferRepository_UpdateStatus_Call {
	return &MockWarehouseTransferRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, tx, id, status)}
}

func (_c *MockWarehouseTransferRepository_UpdateStatus_Call) Run(run func(ctx context.Context, tx *sql.Tx, id uuid.UUID, status domain.TransferStatus)) *MockWarehouseTransferRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID), args[3].(domain.TransferStatus))
	})
	return _c
}

func (_c *MockWarehouseTransferRepository_UpdateStatus_Call) Return(err error) *MockWarehouseTransferRepository_UpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWarehouseTransferRepository_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, id uuid.UUID, status domain.TransferStatus) error) *MockWarehouseTransferRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}
