// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"
	"database/sql"

	"github.com/dyaksa/warehouse/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

type MockOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepository) EXPECT() *MockOrderRepository_Expecter {
	return &MockOrderRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) Create(ctx context.Context, tx *sql.Tx, o *domain.Order) error {
	ret := _mock.Called(ctx, tx, o)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, *domain.Order) error); ok {
		r0 = returnFunc(ctx, tx, o)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOrderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - tx
//   - o
func (_e *MockOrderRepository_Expecter) Create(ctx interface{}, tx interface{}, o interface{}) *MockOrderRepository_Create_Call {
	return &MockOrderRepository_Create_Call{Call: _e.mock.On("Create", ctx, tx, o)}
}

func (_c *MockOrderRepository_Create_Call) Run(run func(ctx context.Context, tx *sql.Tx, o *domain.Order)) *MockOrderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(*domain.Order))
	})
	return _c
}

func (_c *MockOrderRepository_Create_Call) Return(err error) *MockOrderRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_Create_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, o *domain.Order) error) *MockOrderRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) GetByID(ctx context.Context, orderID uuid.UUID) (*domain.Order, error) {
	ret := _mock.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Order, error)); ok {
		return returnFunc(ctx, orderID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Order); ok {
		r0 = returnFunc(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockOrderRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - orderID
func (_e *MockOrderRepository_Expecter) GetByID(ctx interface{}, orderID interface{}) *MockOrderRepository_GetByID_Call {
	return &MockOrderRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, orderID)}
}

func (_c *MockOrderRepository_GetByID_Call) Run(run func(ctx context.Context, orderID uuid.UUID)) *MockOrderRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockOrderRepository_GetByID_Call) Return(order *domain.Order, err error) *MockOrderRepository_GetByID_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, orderID uuid.UUID) (*domain.Order, error)) *MockOrderRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) GetByUserID(ctx context.Context, userID uuid.UUID, limit int, offset int) ([]domain.OrderListItem, int, error) {
	ret := _mock.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []domain.OrderListItem
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]domain.OrderListItem, int, error)); ok {
		return returnFunc(ctx, userID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []domain.OrderListItem); ok {
		r0 = returnFunc(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.OrderListItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) int); ok {
		r1 = returnFunc(ctx, userID, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, uuid.UUID, int, int) error); ok {
		r2 = returnFunc(ctx, userID, limit, offset)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockOrderRepository_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockOrderRepository_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx
//   - userID
//   - limit
//   - offset
func (_e *MockOrderRepository_Expecter) GetByUserID(ctx interface{}, userID interface{}, limit interface{}, offset interface{}) *MockOrderRepository_GetByUserID_Call {
	return &MockOrderRepository_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, userID, limit, offset)}
}

func (_c *MockOrderRepository_GetByUserID_Call) Run(run func(ctx context.Context, userID uuid.UUID, limit int, offset int)) *MockOrderRepository_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockOrderRepository_GetByUserID_Call) Return(orderListItems []domain.OrderListItem, n int, err error) *MockOrderRepository_GetByUserID_Call {
	_c.Call.Return(orderListItems, n, err)
	return _c
}

func (_c *MockOrderRepository_GetByUserID_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID, limit int, offset int) ([]domain.OrderListItem, int, error)) *MockOrderRepository_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Updatestatus provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) Updatestatus(ctx context.Context, orderID uuid.UUID, status domain.OrderStatus) error {
	ret := _mock.Called(ctx, orderID, status)

	if len(ret) == 0 {
		panic("no return value specified for Updatestatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.OrderStatus) error); ok {
		r0 = returnFunc(ctx, orderID, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_Updatestatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Updatestatus'
type MockOrderRepository_Updatestatus_Call struct {
	*mock.Call
}

// Updatestatus is a helper method to define mock.On call
//   - ctx
//   - orderID
//   - status
func (_e *MockOrderRepository_Expecter) Updatestatus(ctx interface{}, orderID interface{}, status interface{}) *MockOrderRepository_Updatestatus_Call {
	return &MockOrderRepository_Updatestatus_Call{Call: _e.mock.On("Updatestatus", ctx, orderID, status)}
}

func (_c *MockOrderRepository_Updatestatus_Call) Run(run func(ctx context.Context, orderID uuid.UUID, status domain.OrderStatus)) *MockOrderRepository_Updatestatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(domain.OrderStatus))
	})
	return _c
}

func (_c *MockOrderRepository_Updatestatus_Call) Return(err error) *MockOrderRepository_Updatestatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_Updatestatus_Call) RunAndReturn(run func(ctx context.Context, orderID uuid.UUID, status domain.OrderStatus) error) *MockOrderRepository_Updatestatus_Call {
	_c.Call.Return(run)
	return _c
}
