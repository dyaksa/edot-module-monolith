// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"
	"database/sql"

	"github.com/dyaksa/warehouse/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockReservationRepository creates a new instance of MockReservationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReservationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReservationRepository {
	mock := &MockReservationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReservationRepository is an autogenerated mock type for the ReservationRepository type
type MockReservationRepository struct {
	mock.Mock
}

type MockReservationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReservationRepository) EXPECT() *MockReservationRepository_Expecter {
	return &MockReservationRepository_Expecter{mock: &_m.Mock}
}

// CreateMany provides a mock function for the type MockReservationRepository
func (_mock *MockReservationRepository) CreateMany(ctx context.Context, tx *sql.Tx, reservations []domain.Reservation) error {
	ret := _mock.Called(ctx, tx, reservations)

	if len(ret) == 0 {
		panic("no return value specified for CreateMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, []domain.Reservation) error); ok {
		r0 = returnFunc(ctx, tx, reservations)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReservationRepository_CreateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMany'
type MockReservationRepository_CreateMany_Call struct {
	*mock.Call
}

// CreateMany is a helper method to define mock.On call
//   - ctx
//   - tx
//   - reservations
func (_e *MockReservationRepository_Expecter) CreateMany(ctx interface{}, tx interface{}, reservations interface{}) *MockReservationRepository_CreateMany_Call {
	return &MockReservationRepository_CreateMany_Call{Call: _e.mock.On("CreateMany", ctx, tx, reservations)}
}

func (_c *MockReservationRepository_CreateMany_Call) Run(run func(ctx context.Context, tx *sql.Tx, reservations []domain.Reservation)) *MockReservationRepository_CreateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].([]domain.Reservation))
	})
	return _c
}

func (_c *MockReservationRepository_CreateMany_Call) Return(err error) *MockReservationRepository_CreateMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReservationRepository_CreateMany_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, reservations []domain.Reservation) error) *MockReservationRepository_CreateMany_Call {
	_c.Call.Return(run)
	return _c
}

// GetByOrderID provides a mock function for the type MockReservationRepository
func (_mock *MockReservationRepository) GetByOrderID(ctx context.Context, tx *sql.Tx, orderID uuid.UUID) ([]domain.Reservation, error) {
	ret := _mock.Called(ctx, tx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetByOrderID")
	}

	var r0 []domain.Reservation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID) ([]domain.Reservation, error)); ok {
		return returnFunc(ctx, tx, orderID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID) []domain.Reservation); ok {
		r0 = returnFunc(ctx, tx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Reservation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sql.Tx, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, tx, orderID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReservationRepository_GetByOrderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByOrderID'
type MockReservationRepository_GetByOrderID_Call struct {
	*mock.Call
}

// GetByOrderID is a helper method to define mock.On call
//   - ctx
//   - tx
//   - orderID
func (_e *MockReservationRepository_Expecter) GetByOrderID(ctx interface{}, tx interface{}, orderID interface{}) *MockReservationRepository_GetByOrderID_Call {
	return &MockReservationRepository_GetByOrderID_Call{Call: _e.mock.On("GetByOrderID", ctx, tx, orderID)}
}

func (_c *MockReservationRepository_GetByOrderID_Call) Run(run func(ctx context.Context, tx *sql.Tx, orderID uuid.UUID)) *MockReservationRepository_GetByOrderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockReservationRepository_GetByOrderID_Call) Return(reservations []domain.Reservation, err error) *MockReservationRepository_GetByOrderID_Call {
	_c.Call.Return(reservations, err)
	return _c
}

func (_c *MockReservationRepository_GetByOrderID_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, orderID uuid.UUID) ([]domain.Reservation, error)) *MockReservationRepository_GetByOrderID_Call {
	_c.Call.Return(run)
	return _c
}

// MarkCommitted provides a mock function for the type MockReservationRepository
func (_mock *MockReservationRepository) MarkCommitted(ctx context.Context, tx *sql.Tx, orderID uuid.UUID) error {
	ret := _mock.Called(ctx, tx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for MarkCommitted")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, tx, orderID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReservationRepository_MarkCommitted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkCommitted'
type MockReservationRepository_MarkCommitted_Call struct {
	*mock.Call
}

// MarkCommitted is a helper method to define mock.On call
//   - ctx
//   - tx
//   - orderID
func (_e *MockReservationRepository_Expecter) MarkCommitted(ctx interface{}, tx interface{}, orderID interface{}) *MockReservationRepository_MarkCommitted_Call {
	return &MockReservationRepository_MarkCommitted_Call{Call: _e.mock.On("MarkCommitted", ctx, tx, orderID)}
}

func (_c *MockReservationRepository_MarkCommitted_Call) Run(run func(ctx context.Context, tx *sql.Tx, orderID uuid.UUID)) *MockReservationRepository_MarkCommitted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockReservationRepository_MarkCommitted_Call) Return(err error) *MockReservationRepository_MarkCommitted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReservationRepository_MarkCommitted_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, orderID uuid.UUID) error) *MockReservationRepository_MarkCommitted_Call {
	_c.Call.Return(run)
	return _c
}

// MarkExpired provides a mock function for the type MockReservationRepository
func (_mock *MockReservationRepository) MarkExpired(ctx context.Context, tx *sql.Tx, id uuid.UUID) error {
	ret := _mock.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkExpired")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReservationRepository_MarkExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkExpired'
type MockReservationRepository_MarkExpired_Call struct {
	*mock.Call
}

// MarkExpired is a helper method to define mock.On call
//   - ctx
//   - tx
//   - id
func (_e *MockReservationRepository_Expecter) MarkExpired(ctx interface{}, tx interface{}, id interface{}) *MockReservationRepository_MarkExpired_Call {
	return &MockReservationRepository_MarkExpired_Call{Call: _e.mock.On("MarkExpired", ctx, tx, id)}
}

func (_c *MockReservationRepository_MarkExpired_Call) Run(run func(ctx context.Context, tx *sql.Tx, id uuid.UUID)) *MockReservationRepository_MarkExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockReservationRepository_MarkExpired_Call) Return(err error) *MockReservationRepository_MarkExpired_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReservationRepository_MarkExpired_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, id uuid.UUID) error) *MockReservationRepository_MarkExpired_Call {
	_c.Call.Return(run)
	return _c
}

// MarkReleased provides a mock function for the type MockReservationRepository
func (_mock *MockReservationRepository) MarkReleased(ctx context.Context, tx *sql.Tx, orderID uuid.UUID) error {
	ret := _mock.Called(ctx, tx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for MarkReleased")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, tx, orderID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReservationRepository_MarkReleased_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkReleased'
type MockReservationRepository_MarkReleased_Call struct {
	*mock.Call
}

// MarkReleased is a helper method to define mock.On call
//   - ctx
//   - tx
//   - orderID
func (_e *MockReservationRepository_Expecter) MarkReleased(ctx interface{}, tx interface{}, orderID interface{}) *MockReservationRepository_MarkReleased_Call {
	return &MockReservationRepository_MarkReleased_Call{Call: _e.mock.On("MarkReleased", ctx, tx, orderID)}
}

func (_c *MockReservationRepository_MarkReleased_Call) Run(run func(ctx context.Context, tx *sql.Tx, orderID uuid.UUID)) *MockReservationRepository_MarkReleased_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockReservationRepository_MarkReleased_Call) Return(err error) *MockReservationRepository_MarkReleased_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReservationRepository_MarkReleased_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, orderID uuid.UUID) error) *MockReservationRepository_MarkReleased_Call {
	_c.Call.Return(run)
	return _c
}

// PendingCountByOrder provides a mock function for the type MockReservationRepository
func (_mock *MockReservationRepository) PendingCountByOrder(ctx context.Context, tx *sql.Tx, orderID uuid.UUID) (int, error) {
	ret := _mock.Called(ctx, tx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for PendingCountByOrder")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID) (int, error)); ok {
		return returnFunc(ctx, tx, orderID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID) int); ok {
		r0 = returnFunc(ctx, tx, orderID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sql.Tx, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, tx, orderID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReservationRepository_PendingCountByOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PendingCountByOrder'
type MockReservationRepository_PendingCountByOrder_Call struct {
	*mock.Call
}

// PendingCountByOrder is a helper method to define mock.On call
//   - ctx
//   - tx
//   - orderID
func (_e *MockReservationRepository_Expecter) PendingCountByOrder(ctx interface{}, tx interface{}, orderID interface{}) *MockReservationRepository_PendingCountByOrder_Call {
	return &MockReservationRepository_PendingCountByOrder_Call{Call: _e.mock.On("PendingCountByOrder", ctx, tx, orderID)}
}

func (_c *MockReservationRepository_PendingCountByOrder_Call) Run(run func(ctx context.Context, tx *sql.Tx, orderID uuid.UUID)) *MockReservationRepository_PendingCountByOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockReservationRepository_PendingCountByOrder_Call) Return(n int, err error) *MockReservationRepository_PendingCountByOrder_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockReservationRepository_PendingCountByOrder_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, orderID uuid.UUID) (int, error)) *MockReservationRepository_PendingCountByOrder_Call {
	_c.Call.Return(run)
	return _c
}

// PickExpiredForUpdate provides a mock function for the type MockReservationRepository
func (_mock *MockReservationRepository) PickExpiredForUpdate(ctx context.Context, tx *sql.Tx, limit int) ([]domain.Reservation, error) {
	ret := _mock.Called(ctx, tx, limit)

	if len(ret) == 0 {
		panic("no return value specified for PickExpiredForUpdate")
	}

	var r0 []domain.Reservation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) ([]domain.Reservation, error)); ok {
		return returnFunc(ctx, tx, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) []domain.Reservation); ok {
		r0 = returnFunc(ctx, tx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Reservation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = returnFunc(ctx, tx, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReservationRepository_PickExpiredForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PickExpiredForUpdate'
type MockReservationRepository_PickExpiredForUpdate_Call struct {
	*mock.Call
}

// PickExpiredForUpdate is a helper method to define mock.On call
//   - ctx
//   - tx
//   - limit
func (_e *MockReservationRepository_Expecter) PickExpiredForUpdate(ctx interface{}, tx interface{}, limit interface{}) *MockReservationRepository_PickExpiredForUpdate_Call {
	return &MockReservationRepository_PickExpiredForUpdate_Call{Call: _e.mock.On("PickExpiredForUpdate", ctx, tx, limit)}
}

func (_c *MockReservationRepository_PickExpiredForUpdate_Call) Run(run func(ctx context.Context, tx *sql.Tx, limit int)) *MockReservationRepository_PickExpiredForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(int))
	})
	return _c
}

func (_c *MockReservationRepository_PickExpiredForUpdate_Call) Return(reservations []domain.Reservation, err error) *MockReservationRepository_PickExpiredForUpdate_Call {
	_c.Call.Return(reservations, err)
	return _c
}

func (_c *MockReservationRepository_PickExpiredForUpdate_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, limit int) ([]domain.Reservation, error)) *MockReservationRepository_PickExpiredForUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Retrieve provides a mock function for the type MockReservationRepository
func (_mock *MockReservationRepository) Retrieve(ctx context.Context, tx *sql.Tx, id uuid.UUID) (*domain.Reservation, error) {
	ret := _mock.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 *domain.Reservation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID) (*domain.Reservation, error)); ok {
		return returnFunc(ctx, tx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID) *domain.Reservation); ok {
		r0 = returnFunc(ctx, tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reservation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sql.Tx, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, tx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReservationRepository_Retrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retrieve'
type MockReservationRepository_Retrieve_Call struct {
	*mock.Call
}

// Retrieve is a helper method to define mock.On call
//   - ctx
//   - tx
//   - id
func (_e *MockReservationRepository_Expecter) Retrieve(ctx interface{}, tx interface{}, id interface{}) *MockReservationRepository_Retrieve_Call {
	return &MockReservationRepository_Retrieve_Call{Call: _e.mock.On("Retrieve", ctx, tx, id)}
}

func (_c *MockReservationRepository_Retrieve_Call) Run(run func(ctx context.Context, tx *sql.Tx, id uuid.UUID)) *MockReservationRepository_Retrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockReservationRepository_Retrieve_Call) Return(reservation *domain.Reservation, err error) *MockReservationRepository_Retrieve_Call {
	_c.Call.Return(reservation, err)
	return _c
}

func (_c *MockReservationRepository_Retrieve_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, id uuid.UUID) (*domain.Reservation, error)) *MockReservationRepository_Retrieve_Call {
	_c.Call.Return(run)
	return _c
}
