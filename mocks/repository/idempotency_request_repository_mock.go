// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIdempotencyRequestRepository creates a new instance of MockIdempotencyRequestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIdempotencyRequestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIdempotencyRequestRepository {
	mock := &MockIdempotencyRequestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIdempotencyRequestRepository is an autogenerated mock type for the IdempotencyRequestRepository type
type MockIdempotencyRequestRepository struct {
	mock.Mock
}

type MockIdempotencyRequestRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIdempotencyRequestRepository) EXPECT() *MockIdempotencyRequestRepository_Expecter {
	return &MockIdempotencyRequestRepository_Expecter{mock: &_m.Mock}
}

// BeginKey provides a mock function for the type MockIdempotencyRequestRepository
func (_mock *MockIdempotencyRequestRepository) BeginKey(ctx context.Context, tx *sql.Tx, key string, endpoint string, payloadHash string) (bool, error) {
	ret := _mock.Called(ctx, tx, key, endpoint, payloadHash)

	if len(ret) == 0 {
		panic("no return value specified for BeginKey")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string, string) (bool, error)); ok {
		return returnFunc(ctx, tx, key, endpoint, payloadHash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string, string) bool); ok {
		r0 = returnFunc(ctx, tx, key, endpoint, payloadHash)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sql.Tx, string, string, string) error); ok {
		r1 = returnFunc(ctx, tx, key, endpoint, payloadHash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdempotencyRequestRepository_BeginKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginKey'
type MockIdempotencyRequestRepository_BeginKey_Call struct {
	*mock.Call
}

// BeginKey is a helper method to define mock.On call
//   - ctx
//   - tx
//   - key
//   - endpoint
//   - payloadHash
func (_e *MockIdempotencyRequestRepository_Expecter) BeginKey(ctx interface{}, tx interface{}, key interface{}, endpoint interface{}, payloadHash interface{}) *MockIdempotencyRequestRepository_BeginKey_Call {
	return &MockIdempotencyRequestRepository_BeginKey_Call{Call: _e.mock.On("BeginKey", ctx, tx, key, endpoint, payloadHash)}
}

func (_c *MockIdempotencyRequestRepository_BeginKey_Call) Run(run func(ctx context.Context, tx *sql.Tx, key string, endpoint string, payloadHash string)) *MockIdempotencyRequestRepository_BeginKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockIdempotencyRequestRepository_BeginKey_Call) Return(isNew bool, err error) *MockIdempotencyRequestRepository_BeginKey_Call {
	_c.Call.Return(isNew, err)
	return _c
}

func (_c *MockIdempotencyRequestRepository_BeginKey_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, key string, endpoint string, payloadHash string) (bool, error)) *MockIdempotencyRequestRepository_BeginKey_Call {
	_c.Call.Return(run)
	return _c
}

// LoadIfExists provides a mock function for the type MockIdempotencyRequestRepository
func (_mock *MockIdempotencyRequestRepository) LoadIfExists(ctx context.Context, tx *sql.Tx, key string, endpoint string) (string, *uuid.UUID, []byte, bool, error) {
	ret := _mock.Called(ctx, tx, key, endpoint)

	if len(ret) == 0 {
		panic("no return value specified for LoadIfExists")
	}

	var r0 string
	var r1 *uuid.UUID
	var r2 []byte
	var r3 bool
	var r4 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string) (string, *uuid.UUID, []byte, bool, error)); ok {
		return returnFunc(ctx, tx, key, endpoint)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string) string); ok {
		r0 = returnFunc(ctx, tx, key, endpoint)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sql.Tx, string, string) *uuid.UUID); ok {
		r1 = returnFunc(ctx, tx, key, endpoint)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *sql.Tx, string, string) []byte); ok {
		r2 = returnFunc(ctx, tx, key, endpoint)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(3).(func(context.Context, *sql.Tx, string, string) bool); ok {
		r3 = returnFunc(ctx, tx, key, endpoint)
	} else {
		r3 = ret.Get(3).(bool)
	}
	if returnFunc, ok := ret.Get(4).(func(context.Context, *sql.Tx, string, string) error); ok {
		r4 = returnFunc(ctx, tx, key, endpoint)
	} else {
		r4 = ret.Error(4)
	}
	return r0, r1, r2, r3, r4
}

// MockIdempotencyRequestRepository_LoadIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadIfExists'
type MockIdempotencyRequestRepository_LoadIfExists_Call struct {
	*mock.Call
}

// LoadIfExists is a helper method to define mock.On call
//   - ctx
//   - tx
//   - key
//   - endpoint
func (_e *MockIdempotencyRequestRepository_Expecter) LoadIfExists(ctx interface{}, tx interface{}, key interface{}, endpoint interface{}) *MockIdempotencyRequestRepository_LoadIfExists_Call {
	return &MockIdempotencyRequestRepository_LoadIfExists_Call{Call: _e.mock.On("LoadIfExists", ctx, tx, key, endpoint)}
}

func (_c *MockIdempotencyRequestRepository_LoadIfExists_Call) Run(run func(ctx context.Context, tx *sql.Tx, key string, endpoint string)) *MockIdempotencyRequestRepository_LoadIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockIdempotencyRequestRepository_LoadIfExists_Call) Return(payloadHash string, orderID *uuid.UUID, responseJSON []byte, exists bool, err error) *MockIdempotencyRequestRepository_LoadIfExists_Call {
	_c.Call.Return(payloadHash, orderID, responseJSON, exists, err)
	return _c
}

func (_c *MockIdempotencyRequestRepository_LoadIfExists_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, key string, endpoint string) (string, *uuid.UUID, []byte, bool, error)) *MockIdempotencyRequestRepository_LoadIfExists_Call {
	_c.Call.Return(run)
	return _c
}

// SaveResponse provides a mock function for the type MockIdempotencyRequestRepository
func (_mock *MockIdempotencyRequestRepository) SaveResponse(ctx context.Context, tx *sql.Tx, key string, endpoint string, orderID uuid.UUID, responseJSON []byte) error {
	ret := _mock.Called(ctx, tx, key, endpoint, orderID, responseJSON)

	if len(ret) == 0 {
		panic("no return value specified for SaveResponse")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string, uuid.UUID, []byte) error); ok {
		r0 = returnFunc(ctx, tx, key, endpoint, orderID, responseJSON)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIdempotencyRequestRepository_SaveResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveResponse'
type MockIdempotencyRequestRepository_SaveResponse_Call struct {
	*mock.Call
}

// SaveResponse is a helper method to define mock.On call
//   - ctx
//   - tx
//   - key
//   - endpoint
//   - orderID
//   - responseJSON
func (_e *MockIdempotencyRequestRepository_Expecter) SaveResponse(ctx interface{}, tx interface{}, key interface{}, endpoint interface{}, orderID interface{}, responseJSON interface{}) *MockIdempotencyRequestRepository_SaveResponse_Call {
	return &MockIdempotencyRequestRepository_SaveResponse_Call{Call: _e.mock.On("SaveResponse", ctx, tx, key, endpoint, orderID, responseJSON)}
}

func (_c *MockIdempotencyRequestRepository_SaveResponse_Call) Run(run func(ctx context.Context, tx *sql.Tx, key string, endpoint string, orderID uuid.UUID, responseJSON []byte)) *MockIdempotencyRequestRepository_SaveResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(string), args[3].(string), args[4].(uuid.UUID), args[5].([]byte))
	})
	return _c
}

func (_c *MockIdempotencyRequestRepository_SaveResponse_Call) Return(err error) *MockIdempotencyRequestRepository_SaveResponse_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIdempotencyRequestRepository_SaveResponse_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, key string, endpoint string, orderID uuid.UUID, responseJSON []byte) error) *MockIdempotencyRequestRepository_SaveResponse_Call {
	_c.Call.Return(run)
	return _c
}
