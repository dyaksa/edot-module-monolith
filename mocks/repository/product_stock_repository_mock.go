// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"
	"database/sql"

	"github.com/dyaksa/warehouse/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProductStockRepository creates a new instance of MockProductStockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductStockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductStockRepository {
	mock := &MockProductStockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductStockRepository is an autogenerated mock type for the ProductStockRepository type
type MockProductStockRepository struct {
	mock.Mock
}

type MockProductStockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductStockRepository) EXPECT() *MockProductStockRepository_Expecter {
	return &MockProductStockRepository_Expecter{mock: &_m.Mock}
}

// AddStock provides a mock function for the type MockProductStockRepository
func (_mock *MockProductStockRepository) AddStock(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, quantity int32) error {
	ret := _mock.Called(ctx, tx, productID, warehouseID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for AddStock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID, uuid.UUID, int32) error); ok {
		r0 = returnFunc(ctx, tx, productID, warehouseID, quantity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductStockRepository_AddStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStock'
type MockProductStockRepository_AddStock_Call struct {
	*mock.Call
}

// AddStock is a helper method to define mock.On call
//   - ctx
//   - tx
//   - productID
//   - warehouseID
//   - quantity
func (_e *MockProductStockRepository_Expecter) AddStock(ctx interface{}, tx interface{}, productID interface{}, warehouseID interface{}, quantity interface{}) *MockProductStockRepository_AddStock_Call {
	return &MockProductStockRepository_AddStock_Call{Call: _e.mock.On("AddStock", ctx, tx, productID, warehouseID, quantity)}
}

func (_c *MockProductStockRepository_AddStock_Call) Run(run func(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, quantity int32)) *MockProductStockRepository_AddStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID), args[3].(uuid.UUID), args[4].(int32))
	})
	return _c
}

func (_c *MockProductStockRepository_AddStock_Call) Return(err error) *MockProductStockRepository_AddStock_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductStockRepository_AddStock_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, quantity int32) error) *MockProductStockRepository_AddStock_Call {
	_c.Call.Return(run)
	return _c
}

// CommitStock provides a mock function for the type MockProductStockRepository
func (_mock *MockProductStockRepository) CommitStock(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, quantity int32) error {
	ret := _mock.Called(ctx, tx, productID, warehouseID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for CommitStock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID, uuid.UUID, int32) error); ok {
		r0 = returnFunc(ctx, tx, productID, warehouseID, quantity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductStockRepository_CommitStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitStock'
type MockProductStockRepository_CommitStock_Call struct {
	*mock.Call
}

// CommitStock is a helper method to define mock.On call
//   - ctx
//   - tx
//   - productID
//   - warehouseID
//   - quantity
func (_e *MockProductStockRepository_Expecter) CommitStock(ctx interface{}, tx interface{}, productID interface{}, warehouseID interface{}, quantity interface{}) *MockProductStockRepository_CommitStock_Call {
	return &MockProductStockRepository_CommitStock_Call{Call: _e.mock.On("CommitStock", ctx, tx, productID, warehouseID, quantity)}
}

func (_c *MockProductStockRepository_CommitStock_Call) Run(run func(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, quantity int32)) *MockProductStockRepository_CommitStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID), args[3].(uuid.UUID), args[4].(int32))
	})
	return _c
}

func (_c *MockProductStockRepository_CommitStock_Call) Return(err error) *MockProductStockRepository_CommitStock_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductStockRepository_CommitStock_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, quantity int32) error) *MockProductStockRepository_CommitStock_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockProductStockRepository
func (_mock *MockProductStockRepository) Create(ctx context.Context, productStock *domain.ProductStock) (uuid.UUID, error) {
	ret := _mock.Called(ctx, productStock)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.ProductStock) (uuid.UUID, error)); ok {
		return returnFunc(ctx, productStock)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.ProductStock) uuid.UUID); ok {
		r0 = returnFunc(ctx, productStock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.ProductStock) error); ok {
		r1 = returnFunc(ctx, productStock)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductStockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductStockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - productStock
func (_e *MockProductStockRepository_Expecter) Create(ctx interface{}, productStock interface{}) *MockProductStockRepository_Create_Call {
	return &MockProductStockRepository_Create_Call{Call: _e.mock.On("Create", ctx, productStock)}
}

func (_c *MockProductStockRepository_Create_Call) Run(run func(ctx context.Context, productStock *domain.ProductStock)) *MockProductStockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.ProductStock))
	})
	return _c
}

func (_c *MockProductStockRepository_Create_Call) Return(uUID uuid.UUID, err error) *MockProductStockRepository_Create_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockProductStockRepository_Create_Call) RunAndReturn(run func(ctx context.Context, productStock *domain.ProductStock) (uuid.UUID, error)) *MockProductStockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseStock provides a mock function for the type MockProductStockRepository
func (_mock *MockProductStockRepository) ReleaseStock(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, quantity int32) error {
	ret := _mock.Called(ctx, tx, productID, warehouseID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseStock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID, uuid.UUID, int32) error); ok {
		r0 = returnFunc(ctx, tx, productID, warehouseID, quantity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductStockRepository_ReleaseStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseStock'
type MockProductStockRepository_ReleaseStock_Call struct {
	*mock.Call
}

// ReleaseStock is a helper method to define mock.On call
//   - ctx
//   - tx
//   - productID
//   - warehouseID
//   - quantity
func (_e *MockProductStockRepository_Expecter) ReleaseStock(ctx interface{}, tx interface{}, productID interface{}, warehouseID interface{}, quantity interface{}) *MockProductStockRepository_ReleaseStock_Call {
	return &MockProductStockRepository_ReleaseStock_Call{Call: _e.mock.On("ReleaseStock", ctx, tx, productID, warehouseID, quantity)}
}

func (_c *MockProductStockRepository_ReleaseStock_Call) Run(run func(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, quantity int32)) *MockProductStockRepository_ReleaseStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID), args[3].(uuid.UUID), args[4].(int32))
	})
	return _c
}

func (_c *MockProductStockRepository_ReleaseStock_Call) Return(err error) *MockProductStockRepository_ReleaseStock_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductStockRepository_ReleaseStock_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, quantity int32) error) *MockProductStockRepository_ReleaseStock_Call {
	_c.Call.Return(run)
	return _c
}

// TryReserveStock provides a mock function for the type MockProductStockRepository
func (_mock *MockProductStockRepository) TryReserveStock(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, quantity int32) (bool, error) {
	ret := _mock.Called(ctx, tx, productID, warehouseID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for TryReserveStock")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID, uuid.UUID, int32) (bool, error)); ok {
		return returnFunc(ctx, tx, productID, warehouseID, quantity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID, uuid.UUID, int32) bool); ok {
		r0 = returnFunc(ctx, tx, productID, warehouseID, quantity)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sql.Tx, uuid.UUID, uuid.UUID, int32) error); ok {
		r1 = returnFunc(ctx, tx, productID, warehouseID, quantity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductStockRepository_TryReserveStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryReserveStock'
type MockProductStockRepository_TryReserveStock_Call struct {
	*mock.Call
}

// TryReserveStock is a helper method to define mock.On call
//   - ctx
//   - tx
//   - productID
//   - warehouseID
//   - quantity
func (_e *MockProductStockRepository_Expecter) TryReserveStock(ctx interface{}, tx interface{}, productID interface{}, warehouseID interface{}, quantity interface{}) *MockProductStockRepository_TryReserveStock_Call {
	return &MockProductStockRepository_TryReserveStock_Call{Call: _e.mock.On("TryReserveStock", ctx, tx, productID, warehouseID, quantity)}
}

func (_c *MockProductStockRepository_TryReserveStock_Call) Run(run func(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, quantity int32)) *MockProductStockRepository_TryReserveStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID), args[3].(uuid.UUID), args[4].(int32))
	})
	return _c
}

func (_c *MockProductStockRepository_TryReserveStock_Call) Return(b bool, err error) *MockProductStockRepository_TryReserveStock_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockProductStockRepository_TryReserveStock_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, quantity int32) (bool, error)) *MockProductStockRepository_TryReserveStock_Call {
	_c.Call.Return(run)
	return _c
}
