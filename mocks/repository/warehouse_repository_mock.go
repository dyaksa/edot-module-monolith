// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"
	"database/sql"

	"github.com/dyaksa/warehouse/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWarehouseRepository creates a new instance of MockWarehouseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWarehouseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWarehouseRepository {
	mock := &MockWarehouseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWarehouseRepository is an autogenerated mock type for the WarehouseRepository type
type MockWarehouseRepository struct {
	mock.Mock
}

type MockWarehouseRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWarehouseRepository) EXPECT() *MockWarehouseRepository_Expecter {
	return &MockWarehouseRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockWarehouseRepository
func (_mock *MockWarehouseRepository) Create(ctx context.Context, w *domain.WareHouse) error {
	ret := _mock.Called(ctx, w)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.WareHouse) error); ok {
		r0 = returnFunc(ctx, w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWarehouseRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockWarehouseRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - w
func (_e *MockWarehouseRepository_Expecter) Create(ctx interface{}, w interface{}) *MockWarehouseRepository_Create_Call {
	return &MockWarehouseRepository_Create_Call{Call: _e.mock.On("Create", ctx, w)}
}

func (_c *MockWarehouseRepository_Create_Call) Run(run func(ctx context.Context, w *domain.WareHouse)) *MockWarehouseRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.WareHouse))
	})
	return _c
}

func (_c *MockWarehouseRepository_Create_Call) Return(err error) *MockWarehouseRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWarehouseRepository_Create_Call) RunAndReturn(run func(ctx context.Context, w *domain.WareHouse) error) *MockWarehouseRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockWarehouseRepository
func (_mock *MockWarehouseRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWarehouseRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockWarehouseRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockWarehouseRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockWarehouseRepository_Delete_Call {
	return &MockWarehouseRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockWarehouseRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockWarehouseRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockWarehouseRepository_Delete_Call) Return(err error) *MockWarehouseRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWarehouseRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockWarehouseRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByShopID provides a mock function for the type MockWarehouseRepository
func (_mock *MockWarehouseRepository) GetByShopID(ctx context.Context, shopID uuid.UUID) ([]domain.WareHouse, error) {
	ret := _mock.Called(ctx, shopID)

	if len(ret) == 0 {
		panic("no return value specified for GetByShopID")
	}

	var r0 []domain.WareHouse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]domain.WareHouse, error)); ok {
		return returnFunc(ctx, shopID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []domain.WareHouse); ok {
		r0 = returnFunc(ctx, shopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.WareHouse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, shopID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWarehouseRepository_GetByShopID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByShopID'
type MockWarehouseRepository_GetByShopID_Call struct {
	*mock.Call
}

// GetByShopID is a helper method to define mock.On call
//   - ctx
//   - shopID
func (_e *MockWarehouseRepository_Expecter) GetByShopID(ctx interface{}, shopID interface{}) *MockWarehouseRepository_GetByShopID_Call {
	return &MockWarehouseRepository_GetByShopID_Call{Call: _e.mock.On("GetByShopID", ctx, shopID)}
}

func (_c *MockWarehouseRepository_GetByShopID_Call) Run(run func(ctx context.Context, shopID uuid.UUID)) *MockWarehouseRepository_GetByShopID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockWarehouseRepository_GetByShopID_Call) Return(wareHouses []domain.WareHouse, err error) *MockWarehouseRepository_GetByShopID_Call {
	_c.Call.Return(wareHouses, err)
	return _c
}

func (_c *MockWarehouseRepository_GetByShopID_Call) RunAndReturn(run func(ctx context.Context, shopID uuid.UUID) ([]domain.WareHouse, error)) *MockWarehouseRepository_GetByShopID_Call {
	_c.Call.Return(run)
	return _c
}

// Pick provides a mock function for the type MockWarehouseRepository
func (_mock *MockWarehouseRepository) Pick(ctx context.Context, tx *sql.Tx, productID uuid.UUID, qty int, shopID uuid.UUID) (uuid.UUID, error) {
	ret := _mock.Called(ctx, tx, productID, qty, shopID)

	if len(ret) == 0 {
		panic("no return value specified for Pick")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID, int, uuid.UUID) (uuid.UUID, error)); ok {
		return returnFunc(ctx, tx, productID, qty, shopID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID, int, uuid.UUID) uuid.UUID); ok {
		r0 = returnFunc(ctx, tx, productID, qty, shopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sql.Tx, uuid.UUID, int, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, tx, productID, qty, shopID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWarehouseRepository_Pick_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pick'
type MockWarehouseRepository_Pick_Call struct {
	*mock.Call
}

// Pick is a helper method to define mock.On call
//   - ctx
//   - tx
//   - productID
//   - qty
//   - shopID
func (_e *MockWarehouseRepository_Expecter) Pick(ctx interface{}, tx interface{}, productID interface{}, qty interface{}, shopID interface{}) *MockWarehouseRepository_Pick_Call {
	return &MockWarehouseRepository_Pick_Call{Call: _e.mock.On("Pick", ctx, tx, productID, qty, shopID)}
}

func (_c *MockWarehouseRepository_Pick_Call) Run(run func(ctx context.Context, tx *sql.Tx, productID uuid.UUID, qty int, shopID uuid.UUID)) *MockWarehouseRepository_Pick_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID), args[3].(int), args[4].(uuid.UUID))
	})
	return _c
}

func (_c *MockWarehouseRepository_Pick_Call) Return(warehouseID uuid.UUID, err error) *MockWarehouseRepository_Pick_Call {
	_c.Call.Return(warehouseID, err)
	return _c
}

func (_c *MockWarehouseRepository_Pick_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, productID uuid.UUID, qty int, shopID uuid.UUID) (uuid.UUID, error)) *MockWarehouseRepository_Pick_Call {
	_c.Call.Return(run)
	return _c
}

// Retrieve provides a mock function for the type MockWarehouseRepository
func (_mock *MockWarehouseRepository) Retrieve(ctx context.Context, id uuid.UUID) (*domain.WareHouse, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 *domain.WareHouse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.WareHouse, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.WareHouse); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.WareHouse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWarehouseRepository_Retrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retrieve'
type MockWarehouseRepository_Retrieve_Call struct {
	*mock.Call
}

// Retrieve is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockWarehouseRepository_Expecter) Retrieve(ctx interface{}, id interface{}) *MockWarehouseRepository_Retrieve_Call {
	return &MockWarehouseRepository_Retrieve_Call{Call: _e.mock.On("Retrieve", ctx, id)}
}

func (_c *MockWarehouseRepository_Retrieve_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockWarehouseRepository_Retrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockWarehouseRepository_Retrieve_Call) Return(wareHouse *domain.WareHouse, err error) *MockWarehouseRepository_Retrieve_Call {
	_c.Call.Return(wareHouse, err)
	return _c
}

func (_c *MockWarehouseRepository_Retrieve_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*domain.WareHouse, error)) *MockWarehouseRepository_Retrieve_Call {
	_c.Call.Return(run)
	return _c
}

// SetActive provides a mock function for the type MockWarehouseRepository
func (_mock *MockWarehouseRepository) SetActive(ctx context.Context, id uuid.UUID, isActive bool) error {
	ret := _mock.Called(ctx, id, isActive)

	if len(ret) == 0 {
		panic("no return value specified for SetActive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) error); ok {
		r0 = returnFunc(ctx, id, isActive)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWarehouseRepository_SetActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetActive'
type MockWarehouseRepository_SetActive_Call struct {
	*mock.Call
}

// SetActive is a helper method to define mock.On call
//   - ctx
//   - id
//   - isActive
func (_e *MockWarehouseRepository_Expecter) SetActive(ctx interface{}, id interface{}, isActive interface{}) *MockWarehouseRepository_SetActive_Call {
	return &MockWarehouseRepository_SetActive_Call{Call: _e.mock.On("SetActive", ctx, id, isActive)}
}

func (_c *MockWarehouseRepository_SetActive_Call) Run(run func(ctx context.Context, id uuid.UUID, isActive bool)) *MockWarehouseRepository_SetActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(bool))
	})
	return _c
}

func (_c *MockWarehouseRepository_SetActive_Call) Return(err error) *MockWarehouseRepository_SetActive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWarehouseRepository_SetActive_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, isActive bool) error) *MockWarehouseRepository_SetActive_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockWarehouseRepository
func (_mock *MockWarehouseRepository) Update(ctx context.Context, w *domain.WareHouse) error {
	ret := _mock.Called(ctx, w)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.WareHouse) error); ok {
		r0 = returnFunc(ctx, w)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWarehouseRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockWarehouseRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - w
func (_e *MockWarehouseRepository_Expecter) Update(ctx interface{}, w interface{}) *MockWarehouseRepository_Update_Call {
	return &MockWarehouseRepository_Update_Call{Call: _e.mock.On("Update", ctx, w)}
}

func (_c *MockWarehouseRepository_Update_Call) Run(run func(ctx context.Context, w *domain.WareHouse)) *MockWarehouseRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.WareHouse))
	})
	return _c
}

func (_c *MockWarehouseRepository_Update_Call) Return(err error) *MockWarehouseRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWarehouseRepository_Update_Call) RunAndReturn(run func(ctx context.Context, w *domain.WareHouse) error) *MockWarehouseRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
