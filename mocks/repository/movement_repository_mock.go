// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMovementRepository creates a new instance of MockMovementRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMovementRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMovementRepository {
	mock := &MockMovementRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMovementRepository is an autogenerated mock type for the MovementRepository type
type MockMovementRepository struct {
	mock.Mock
}

type MockMovementRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMovementRepository) EXPECT() *MockMovementRepository_Expecter {
	return &MockMovementRepository_Expecter{mock: &_m.Mock}
}

// Append provides a mock function for the type MockMovementRepository
func (_mock *MockMovementRepository) Append(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, typ string, qty int, refType string, refID uuid.UUID) error {
	ret := _mock.Called(ctx, tx, productID, warehouseID, typ, qty, refType, refID)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.Tx, uuid.UUID, uuid.UUID, string, int, string, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, tx, productID, warehouseID, typ, qty, refType, refID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMovementRepository_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type MockMovementRepository_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - ctx
//   - tx
//   - productID
//   - warehouseID
//   - typ
//   - qty
//   - refType
//   - refID
func (_e *MockMovementRepository_Expecter) Append(ctx interface{}, tx interface{}, productID interface{}, warehouseID interface{}, typ interface{}, qty interface{}, refType interface{}, refID interface{}) *MockMovementRepository_Append_Call {
	return &MockMovementRepository_Append_Call{Call: _e.mock.On("Append", ctx, tx, productID, warehouseID, typ, qty, refType, refID)}
}

func (_c *MockMovementRepository_Append_Call) Run(run func(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, typ string, qty int, refType string, refID uuid.UUID)) *MockMovementRepository_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.Tx), args[2].(uuid.UUID), args[3].(uuid.UUID), args[4].(string), args[5].(int), args[6].(string), args[7].(uuid.UUID))
	})
	return _c
}

func (_c *MockMovementRepository_Append_Call) Return(err error) *MockMovementRepository_Append_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMovementRepository_Append_Call) RunAndReturn(run func(ctx context.Context, tx *sql.Tx, productID uuid.UUID, warehouseID uuid.UUID, typ string, qty int, refType string, refID uuid.UUID) error) *MockMovementRepository_Append_Call {
	_c.Call.Return(run)
	return _c
}
