// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pqsql

import (
	"context"
	"database/sql"

	"github.com/dyaksa/warehouse/infrastructure/pqsql"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function for the type MockClient
func (_mock *MockClient) Begin() (*sql.Tx, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *sql.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*sql.Tx, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *sql.Tx); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockClient_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *MockClient_Expecter) Begin() *MockClient_Begin_Call {
	return &MockClient_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *MockClient_Begin_Call) Run(run func()) *MockClient_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Begin_Call) Return(tx *sql.Tx, err error) *MockClient_Begin_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *MockClient_Begin_Call) RunAndReturn(run func() (*sql.Tx, error)) *MockClient_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// BeginTx provides a mock function for the type MockClient
func (_mock *MockClient) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	ret := _mock.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 *sql.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) (*sql.Tx, error)); ok {
		return returnFunc(ctx, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) *sql.Tx); ok {
		r0 = returnFunc(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = returnFunc(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockClient_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx
//   - opts
func (_e *MockClient_Expecter) BeginTx(ctx interface{}, opts interface{}) *MockClient_BeginTx_Call {
	return &MockClient_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx, opts)}
}

func (_c *MockClient_BeginTx_Call) Run(run func(ctx context.Context, opts *sql.TxOptions)) *MockClient_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.TxOptions))
	})
	return _c
}

func (_c *MockClient_BeginTx_Call) Return(tx *sql.Tx, err error) *MockClient_BeginTx_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *MockClient_BeginTx_Call) RunAndReturn(run func(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error)) *MockClient_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockClient
func (_mock *MockClient) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockClient_Expecter) Close() *MockClient_Close_Call {
	return &MockClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockClient_Close_Call) Run(run func()) *MockClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Close_Call) Return(err error) *MockClient_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Close_Call) RunAndReturn(run func() error) *MockClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Database provides a mock function for the type MockClient
func (_mock *MockClient) Database() pqsql.Database {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 pqsql.Database
	if returnFunc, ok := ret.Get(0).(func() pqsql.Database); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pqsql.Database)
		}
	}
	return r0
}

// MockClient_Database_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Database'
type MockClient_Database_Call struct {
	*mock.Call
}

// Database is a helper method to define mock.On call
func (_e *MockClient_Expecter) Database() *MockClient_Database_Call {
	return &MockClient_Database_Call{Call: _e.mock.On("Database")}
}

func (_c *MockClient_Database_Call) Run(run func()) *MockClient_Database_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Database_Call) Return(database pqsql.Database) *MockClient_Database_Call {
	_c.Call.Return(database)
	return _c
}

func (_c *MockClient_Database_Call) RunAndReturn(run func() pqsql.Database) *MockClient_Database_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockClient
func (_mock *MockClient) Ping() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *MockClient_Expecter) Ping() *MockClient_Ping_Call {
	return &MockClient_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *MockClient_Ping_Call) Run(run func()) *MockClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Ping_Call) Return(err error) *MockClient_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Ping_Call) RunAndReturn(run func() error) *MockClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// PingContext provides a mock function for the type MockClient
func (_mock *MockClient) PingContext(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PingContext")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_PingContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PingContext'
type MockClient_PingContext_Call struct {
	*mock.Call
}

// PingContext is a helper method to define mock.On call
//   - ctx
func (_e *MockClient_Expecter) PingContext(ctx interface{}) *MockClient_PingContext_Call {
	return &MockClient_PingContext_Call{Call: _e.mock.On("PingContext", ctx)}
}

func (_c *MockClient_PingContext_Call) Run(run func(ctx context.Context)) *MockClient_PingContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_PingContext_Call) Return(err error) *MockClient_PingContext_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_PingContext_Call) RunAndReturn(run func(ctx context.Context) error) *MockClient_PingContext_Call {
	_c.Call.Return(run)
	return _c
}

// Prepare provides a mock function for the type MockClient
func (_mock *MockClient) Prepare(query string) (*sql.Stmt, error) {
	ret := _mock.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 *sql.Stmt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*sql.Stmt, error)); ok {
		return returnFunc(query)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *sql.Stmt); ok {
		r0 = returnFunc(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'
type MockClient_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
//   - query
func (_e *MockClient_Expecter) Prepare(query interface{}) *MockClient_Prepare_Call {
	return &MockClient_Prepare_Call{Call: _e.mock.On("Prepare", query)}
}

func (_c *MockClient_Prepare_Call) Run(run func(query string)) *MockClient_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_Prepare_Call) Return(stmt *sql.Stmt, err error) *MockClient_Prepare_Call {
	_c.Call.Return(stmt, err)
	return _c
}

func (_c *MockClient_Prepare_Call) RunAndReturn(run func(query string) (*sql.Stmt, error)) *MockClient_Prepare_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareContext provides a mock function for the type MockClient
func (_mock *MockClient) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	ret := _mock.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for PrepareContext")
	}

	var r0 *sql.Stmt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*sql.Stmt, error)); ok {
		return returnFunc(ctx, query)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *sql.Stmt); ok {
		r0 = returnFunc(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_PrepareContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareContext'
type MockClient_PrepareContext_Call struct {
	*mock.Call
}

// PrepareContext is a helper method to define mock.On call
//   - ctx
//   - query
func (_e *MockClient_Expecter) PrepareContext(ctx interface{}, query interface{}) *MockClient_PrepareContext_Call {
	return &MockClient_PrepareContext_Call{Call: _e.mock.On("PrepareContext", ctx, query)}
}

func (_c *MockClient_PrepareContext_Call) Run(run func(ctx context.Context, query string)) *MockClient_PrepareContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_PrepareContext_Call) Return(stmt *sql.Stmt, err error) *MockClient_PrepareContext_Call {
	_c.Call.Return(stmt, err)
	return _c
}

func (_c *MockClient_PrepareContext_Call) RunAndReturn(run func(ctx context.Context, query string) (*sql.Stmt, error)) *MockClient_PrepareContext_Call {
	_c.Call.Return(run)
	return _c
}
