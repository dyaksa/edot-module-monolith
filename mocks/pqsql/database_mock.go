// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pqsql

import (
	"context"
	"database/sql"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// ExecContext provides a mock function for the type MockDatabase
func (_mock *MockDatabase) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ExecContext")
	}

	var r0 sql.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (sql.Result, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type MockDatabase_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//   - ctx
//   - query
//   - args
func (_e *MockDatabase_Expecter) ExecContext(ctx interface{}, query interface{}, args ...interface{}) *MockDatabase_ExecContext_Call {
	return &MockDatabase_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDatabase_ExecContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockDatabase_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]interface{})
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabase_ExecContext_Call) Return(result sql.Result, err error) *MockDatabase_ExecContext_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockDatabase_ExecContext_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) (sql.Result, error)) *MockDatabase_ExecContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryContext provides a mock function for the type MockDatabase
func (_mock *MockDatabase) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryContext")
	}

	var r0 *sql.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (*sql.Rows, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Rows); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_QueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryContext'
type MockDatabase_QueryContext_Call struct {
	*mock.Call
}

// QueryContext is a helper method to define mock.On call
//   - ctx
//   - query
//   - args
func (_e *MockDatabase_Expecter) QueryContext(ctx interface{}, query interface{}, args ...interface{}) *MockDatabase_QueryContext_Call {
	return &MockDatabase_QueryContext_Call{Call: _e.mock.On("QueryContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDatabase_QueryContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockDatabase_QueryContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]interface{})
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabase_QueryContext_Call) Return(rows *sql.Rows, err error) *MockDatabase_QueryContext_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *MockDatabase_QueryContext_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)) *MockDatabase_QueryContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRowContext provides a mock function for the type MockDatabase
func (_mock *MockDatabase) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRowContext")
	}

	var r0 *sql.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Row); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}
	return r0
}

// MockDatabase_QueryRowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRowContext'
type MockDatabase_QueryRowContext_Call struct {
	*mock.Call
}

// QueryRowContext is a helper method to define mock.On call
//   - ctx
//   - query
//   - args
func (_e *MockDatabase_Expecter) QueryRowContext(ctx interface{}, query interface{}, args ...interface{}) *MockDatabase_QueryRowContext_Call {
	return &MockDatabase_QueryRowContext_Call{Call: _e.mock.On("QueryRowContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDatabase_QueryRowContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockDatabase_QueryRowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]interface{})
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabase_QueryRowContext_Call) Return(row *sql.Row) *MockDatabase_QueryRowContext_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *MockDatabase_QueryRowContext_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) *sql.Row) *MockDatabase_QueryRowContext_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function for the type MockDatabase
func (_mock *MockDatabase) Transaction(ctx context.Context, fn func(ctx context.Context, tx *sql.Tx) (any, error)) (any, error) {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(ctx context.Context, tx *sql.Tx) (any, error)) (any, error)); ok {
		return returnFunc(ctx, fn)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(ctx context.Context, tx *sql.Tx) (any, error)) any); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, func(ctx context.Context, tx *sql.Tx) (any, error)) error); ok {
		r1 = returnFunc(ctx, fn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabase_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type MockDatabase_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - ctx
//   - fn
func (_e *MockDatabase_Expecter) Transaction(ctx interface{}, fn interface{}) *MockDatabase_Transaction_Call {
	return &MockDatabase_Transaction_Call{Call: _e.mock.On("Transaction", ctx, fn)}
}

func (_c *MockDatabase_Transaction_Call) Run(run func(ctx context.Context, fn func(ctx context.Context, tx *sql.Tx) (any, error))) *MockDatabase_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(ctx context.Context, tx *sql.Tx) (any, error)))
	})
	return _c
}

func (_c *MockDatabase_Transaction_Call) Return(v any, err error) *MockDatabase_Transaction_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockDatabase_Transaction_Call) RunAndReturn(run func(ctx context.Context, fn func(ctx context.Context, tx *sql.Tx) (any, error)) (any, error)) *MockDatabase_Transaction_Call {
	_c.Call.Return(run)
	return _c
}
