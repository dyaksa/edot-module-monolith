// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package crypto

import (
	"github.com/dyaksa/encryption-pii/crypto/aesx"
	"github.com/dyaksa/encryption-pii/crypto/core"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCrypto creates a new instance of MockCrypto. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCrypto(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCrypto {
	mock := &MockCrypto{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCrypto is an autogenerated mock type for the Crypto type
type MockCrypto struct {
	mock.Mock
}

type MockCrypto_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCrypto) EXPECT() *MockCrypto_Expecter {
	return &MockCrypto_Expecter{mock: &_m.Mock}
}

// AESFunc provides a mock function for the type MockCrypto
func (_mock *MockCrypto) AESFunc() func() (core.PrimitiveAES, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AESFunc")
	}

	var r0 func() (core.PrimitiveAES, error)
	if returnFunc, ok := ret.Get(0).(func() func() (core.PrimitiveAES, error)); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() (core.PrimitiveAES, error))
		}
	}
	return r0
}

// MockCrypto_AESFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AESFunc'
type MockCrypto_AESFunc_Call struct {
	*mock.Call
}

// AESFunc is a helper method to define mock.On call
func (_e *MockCrypto_Expecter) AESFunc() *MockCrypto_AESFunc_Call {
	return &MockCrypto_AESFunc_Call{Call: _e.mock.On("AESFunc")}
}

func (_c *MockCrypto_AESFunc_Call) Run(run func()) *MockCrypto_AESFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCrypto_AESFunc_Call) Return(fn func() (core.PrimitiveAES, error)) *MockCrypto_AESFunc_Call {
	_c.Call.Return(fn)
	return _c
}

func (_c *MockCrypto_AESFunc_Call) RunAndReturn(run func() func() (core.PrimitiveAES, error)) *MockCrypto_AESFunc_Call {
	_c.Call.Return(run)
	return _c
}

// BindHeap provides a mock function for the type MockCrypto
func (_mock *MockCrypto) BindHeap(entity any) error {
	ret := _mock.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for BindHeap")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCrypto_BindHeap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindHeap'
type MockCrypto_BindHeap_Call struct {
	*mock.Call
}

// BindHeap is a helper method to define mock.On call
//   - entity
func (_e *MockCrypto_Expecter) BindHeap(entity interface{}) *MockCrypto_BindHeap_Call {
	return &MockCrypto_BindHeap_Call{Call: _e.mock.On("BindHeap", entity)}
}

func (_c *MockCrypto_BindHeap_Call) Run(run func(entity any)) *MockCrypto_BindHeap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *MockCrypto_BindHeap_Call) Return(err error) *MockCrypto_BindHeap_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCrypto_BindHeap_Call) RunAndReturn(run func(entity any) error) *MockCrypto_BindHeap_Call {
	_c.Call.Return(run)
	return _c
}

// Decrypt provides a mock function for the type MockCrypto
func (_mock *MockCrypto) Decrypt(def string) aesx.AES[string, core.PrimitiveAES] {
	ret := _mock.Called(def)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 aesx.AES[string, core.PrimitiveAES]
	if returnFunc, ok := ret.Get(0).(func(string) aesx.AES[string, core.PrimitiveAES]); ok {
		r0 = returnFunc(def)
	} else {
		r0 = ret.Get(0).(aesx.AES[string, core.PrimitiveAES])
	}
	return r0
}

// MockCrypto_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type MockCrypto_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - def
func (_e *MockCrypto_Expecter) Decrypt(def interface{}) *MockCrypto_Decrypt_Call {
	return &MockCrypto_Decrypt_Call{Call: _e.mock.On("Decrypt", def)}
}

func (_c *MockCrypto_Decrypt_Call) Run(run func(def string)) *MockCrypto_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCrypto_Decrypt_Call) Return(aES aesx.AES[string, core.PrimitiveAES]) *MockCrypto_Decrypt_Call {
	_c.Call.Return(aES)
	return _c
}

func (_c *MockCrypto_Decrypt_Call) RunAndReturn(run func(def string) aesx.AES[string, core.PrimitiveAES]) *MockCrypto_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function for the type MockCrypto
func (_mock *MockCrypto) Encrypt(data string) aesx.AES[string, core.PrimitiveAES] {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 aesx.AES[string, core.PrimitiveAES]
	if returnFunc, ok := ret.Get(0).(func(string) aesx.AES[string, core.PrimitiveAES]); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Get(0).(aesx.AES[string, core.PrimitiveAES])
	}
	return r0
}

// MockCrypto_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type MockCrypto_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - data
func (_e *MockCrypto_Expecter) Encrypt(data interface{}) *MockCrypto_Encrypt_Call {
	return &MockCrypto_Encrypt_Call{Call: _e.mock.On("Encrypt", data)}
}

func (_c *MockCrypto_Encrypt_Call) Run(run func(data string)) *MockCrypto_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCrypto_Encrypt_Call) Return(aES aesx.AES[string, core.PrimitiveAES]) *MockCrypto_Encrypt_Call {
	_c.Call.Return(aES)
	return _c
}

func (_c *MockCrypto_Encrypt_Call) RunAndReturn(run func(data string) aesx.AES[string, core.PrimitiveAES]) *MockCrypto_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// HashString provides a mock function for the type MockCrypto
func (_mock *MockCrypto) HashString(s string) string {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for HashString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockCrypto_HashString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashString'
type MockCrypto_HashString_Call struct {
	*mock.Call
}

// HashString is a helper method to define mock.On call
//   - s
func (_e *MockCrypto_Expecter) HashString(s interface{}) *MockCrypto_HashString_Call {
	return &MockCrypto_HashString_Call{Call: _e.mock.On("HashString", s)}
}

func (_c *MockCrypto_HashString_Call) Run(run func(s string)) *MockCrypto_HashString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCrypto_HashString_Call) Return(s1 string) *MockCrypto_HashString_Call {
	_c.Call.Return(s1)
	return _c
}

func (_c *MockCrypto_HashString_Call) RunAndReturn(run func(s string) string) *MockCrypto_HashString_Call {
	_c.Call.Return(run)
	return _c
}
